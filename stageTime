import requests
from datetime import datetime

# Replace these with your actual Terraform Enterprise API token and base URL
API_TOKEN = "your-api-token"  # Terraform Enterprise API token
BASE_URL = "https://app.terraform.io/api/v2"

# Set up the headers for the requests
HEADERS = {
    "Authorization": f"Bearer {API_TOKEN}",
    "Content-Type": "application/vnd.api+json"
}

# Function to fetch all organizations
def get_organizations():
    url = f"{BASE_URL}/organizations"
    response = requests.get(url, headers=HEADERS)
    response.raise_for_status()
    return response.json()['data']

# Function to fetch all workspaces for an organization
def get_workspaces(organization_name):
    url = f"{BASE_URL}/organizations/{organization_name}/workspaces"
    response = requests.get(url, headers=HEADERS)
    response.raise_for_status()
    return response.json()['data']

# Function to fetch all runs for a given workspace
def get_workspace_runs(workspace_id):
    url = f"{BASE_URL}/workspaces/{workspace_id}/runs"
    response = requests.get(url, headers=HEADERS)
    response.raise_for_status()
    return response.json()['data']

# Helper function to handle missing timestamps
def get_timestamp(timestamps, key):
    return timestamps.get(key, 'N/A')

# Main function to gather all timestamps and write them to a file
def gather_and_write_timestamps(output_file):
    total_runs = 0

    # Open the output file
    with open(output_file, 'w') as file:
        # Write the header
        file.write(f"Organization, Workspace, Run ID, Run Status, Plan Started At, Plan Completed At, "
                   f"Apply Started At, Apply Completed At, Plan Queued At, Apply Queued At\n")

        # Fetch all organizations
        organizations = get_organizations()
        for organization in organizations:
            org_name = organization['attributes']['name']
            print(f"Fetching workspaces for organization: {org_name}")

            # Fetch all workspaces for this organization
            workspaces = get_workspaces(org_name)
            for workspace in workspaces:
                workspace_id = workspace['id']
                workspace_name = workspace['attributes']['name']

                # Fetch all runs for this workspace
                runs = get_workspace_runs(workspace_id)

                # Process each run
                for run in runs:
                    timestamps = run['attributes']['status-timestamps']
                    run_id = run['id']
                    run_status = run['attributes']['status']

                    # Collect all timestamps
                    plan_started_at = get_timestamp(timestamps, 'plan-started-at')
                    plan_completed_at = get_timestamp(timestamps, 'plan-completed-at')
                    apply_started_at = get_timestamp(timestamps, 'apply-started-at')
                    apply_completed_at = get_timestamp(timestamps, 'apply-completed-at')
                    plan_queued_at = get_timestamp(timestamps, 'plan-queued-at')
                    apply_queued_at = get_timestamp(timestamps, 'apply-queued-at')

                    # Write the result for this run to the file
                    file.write(f"{org_name}, {workspace_name}, {run_id}, {run_status}, "
                               f"{plan_started_at}, {plan_completed_at}, "
                               f"{apply_started_at}, {apply_completed_at}, "
                               f"{plan_queued_at}, {apply_queued_at}\n")

                    total_runs += 1

        file.write(f"\nTotal number of runs processed: {total_runs}\n")

    print(f"Results written to {output_file}")

# Execute the script
if __name__ == "__main__":
    output_file = "terraform_run_status_timestamps.csv"  # The output file path
    gather_and_write_timestamps(output_file)
