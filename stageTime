import requests
from datetime import datetime

# Replace these with your actual Terraform Enterprise details
API_TOKEN = "your-api-token"  # Terraform Enterprise API token
ORG_NAME = "your-organization-name"  # Terraform Enterprise organization name
BASE_URL = "https://app.terraform.io/api/v2"

# Set up the headers for the requests
HEADERS = {
    "Authorization": f"Bearer {API_TOKEN}",
    "Content-Type": "application/vnd.api+json"
}

# Helper function to calculate the duration between two timestamps
def calculate_duration(start_time, end_time):
    if not start_time or not end_time:
        return None
    start_time = datetime.fromisoformat(start_time.replace('Z', '+00:00'))
    end_time = datetime.fromisoformat(end_time.replace('Z', '+00:00'))
    duration = end_time - start_time
    return duration.total_seconds() / 60  # Return the duration in minutes

# Function to fetch all workspaces for the organization
def get_workspaces():
    url = f"{BASE_URL}/organizations/{ORG_NAME}/workspaces"
    response = requests.get(url, headers=HEADERS)
    response.raise_for_status()
    return response.json()['data']

# Function to fetch all runs for a given workspace
def get_workspace_runs(workspace_id):
    url = f"{BASE_URL}/workspaces/{workspace_id}/runs"
    response = requests.get(url, headers=HEADERS)
    response.raise_for_status()
    return response.json()['data']

# Main function to calculate the durations for each stage of all runs
def calculate_stage_durations():
    total_plan_time = 0.0
    total_apply_time = 0.0
    total_runs = 0
    plan_durations = []
    apply_durations = []

    # Fetch all workspaces
    workspaces = get_workspaces()
    for workspace in workspaces:
        workspace_id = workspace['id']
        print(f"Fetching runs for workspace: {workspace['attributes']['name']}")

        # Fetch all runs for this workspace
        runs = get_workspace_runs(workspace_id)

        # Calculate the duration for each stage (plan and apply) for each run
        for run in runs:
            timestamps = run['attributes']['status-timestamps']

            # Calculate plan duration
            plan_start = timestamps.get('plan-started-at')
            plan_end = timestamps.get('plan-completed-at')
            plan_duration = calculate_duration(plan_start, plan_end)
            if plan_duration:
                total_plan_time += plan_duration
                plan_durations.append(plan_duration)

            # Calculate apply duration
            apply_start = timestamps.get('apply-started-at')
            apply_end = timestamps.get('apply-completed-at')
            apply_duration = calculate_duration(apply_start, apply_end)
            if apply_duration:
                total_apply_time += apply_duration
                apply_durations.append(apply_duration)

            total_runs += 1

    # Summary of the results
    if total_runs > 0:
        average_plan_time = total_plan_time / total_runs if total_plan_time else 0
        average_apply_time = total_apply_time / total_runs if total_apply_time else 0
        print(f"Total number of runs: {total_runs}")
        print(f"Total plan time: {total_plan_time:.2f} minutes")
        print(f"Average plan time per run: {average_plan_time:.2f} minutes")
        print(f"Total apply time: {total_apply_time:.2f} minutes")
        print(f"Average apply time per run: {average_apply_time:.2f} minutes")
        
        # Optionally, print longest and shortest times
        if plan_durations:
            print(f"Longest plan duration: {max(plan_durations):.2f} minutes")
            print(f"Shortest plan duration: {min(plan_durations):.2f} minutes")
        if apply_durations:
            print(f"Longest apply duration: {max(apply_durations):.2f} minutes")
            print(f"Shortest apply duration: {min(apply_durations):.2f} minutes")
    else:
        print("No runs found.")

# Execute the script
if __name__ == "__main__":
    calculate_stage_durations()
